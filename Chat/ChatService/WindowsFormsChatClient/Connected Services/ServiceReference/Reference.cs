//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsChatClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserMessage", Namespace="http://schemas.datacontract.org/2004/07/ChatService.Models.UserEntities")]
    [System.SerializableAttribute()]
    public partial class UserMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DepartureTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DepartureTime {
            get {
                return this.DepartureTimeField;
            }
            set {
                if ((this.DepartureTimeField.Equals(value) != true)) {
                    this.DepartureTimeField = value;
                    this.RaisePropertyChanged("DepartureTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageText {
            get {
                return this.MessageTextField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageTextField, value) != true)) {
                    this.MessageTextField = value;
                    this.RaisePropertyChanged("MessageText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IChatMainService", CallbackContract=typeof(WindowsFormsChatClient.ServiceReference.IChatMainServiceCallback))]
    public interface IChatMainService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMainService/UserRegistration", ReplyAction="http://tempuri.org/IChatMainService/UserRegistrationResponse")]
        bool UserRegistration(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMainService/UserRegistration", ReplyAction="http://tempuri.org/IChatMainService/UserRegistrationResponse")]
        System.Threading.Tasks.Task<bool> UserRegistrationAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMainService/LoginPasswordValidation", ReplyAction="http://tempuri.org/IChatMainService/LoginPasswordValidationResponse")]
        bool LoginPasswordValidation(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMainService/LoginPasswordValidation", ReplyAction="http://tempuri.org/IChatMainService/LoginPasswordValidationResponse")]
        System.Threading.Tasks.Task<bool> LoginPasswordValidationAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/UserLogin")]
        void UserLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/UserLogin")]
        System.Threading.Tasks.Task UserLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/UserLogout")]
        void UserLogout();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/UserLogout")]
        System.Threading.Tasks.Task UserLogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/SendMessage")]
        void SendMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/SendMessageToClient")]
        void SendMessageToClient(string login, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/SendMessageToClient")]
        System.Threading.Tasks.Task SendMessageToClientAsync(string login, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatMainServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/DisplayMessageInChat")]
        void DisplayMessageInChat(WindowsFormsChatClient.ServiceReference.UserMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/GetAllConnectedUsers")]
        void GetAllConnectedUsers(System.Collections.Generic.List<string> connectedUserLogins);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMainService/UserNotification")]
        void UserNotification(string login, bool way);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatMainServiceChannel : WindowsFormsChatClient.ServiceReference.IChatMainService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatMainServiceClient : System.ServiceModel.DuplexClientBase<WindowsFormsChatClient.ServiceReference.IChatMainService>, WindowsFormsChatClient.ServiceReference.IChatMainService {
        
        public ChatMainServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatMainServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatMainServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatMainServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatMainServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool UserRegistration(string login, string password) {
            return base.Channel.UserRegistration(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> UserRegistrationAsync(string login, string password) {
            return base.Channel.UserRegistrationAsync(login, password);
        }
        
        public bool LoginPasswordValidation(string login, string password) {
            return base.Channel.LoginPasswordValidation(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginPasswordValidationAsync(string login, string password) {
            return base.Channel.LoginPasswordValidationAsync(login, password);
        }
        
        public void UserLogin(string login) {
            base.Channel.UserLogin(login);
        }
        
        public System.Threading.Tasks.Task UserLoginAsync(string login) {
            return base.Channel.UserLoginAsync(login);
        }
        
        public void UserLogout() {
            base.Channel.UserLogout();
        }
        
        public System.Threading.Tasks.Task UserLogoutAsync() {
            return base.Channel.UserLogoutAsync();
        }
        
        public void SendMessage(string message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public void SendMessageToClient(string login, string message) {
            base.Channel.SendMessageToClient(login, message);
        }
        
        public System.Threading.Tasks.Task SendMessageToClientAsync(string login, string message) {
            return base.Channel.SendMessageToClientAsync(login, message);
        }
    }
}
