//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsTicTacToeClient.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ITicTacToeMainContract", CallbackContract=typeof(WindowsFormsTicTacToeClient.ServiceReference.ITicTacToeMainContractCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ITicTacToeMainContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicTacToeMainContract/Join", ReplyAction="http://tempuri.org/ITicTacToeMainContract/JoinResponse")]
        WindowsFormsTicTacToeClient.ServiceReference.JoinResponse Join(WindowsFormsTicTacToeClient.ServiceReference.JoinRequest request);
        
        // CODEGEN: Идет формирование контракта на сообщение, так как операция может иметь много возвращаемых значений.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicTacToeMainContract/Join", ReplyAction="http://tempuri.org/ITicTacToeMainContract/JoinResponse")]
        System.Threading.Tasks.Task<WindowsFormsTicTacToeClient.ServiceReference.JoinResponse> JoinAsync(WindowsFormsTicTacToeClient.ServiceReference.JoinRequest request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicTacToeMainContract/Leave")]
        void Leave();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicTacToeMainContract/Leave")]
        System.Threading.Tasks.Task LeaveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicTacToeMainContract/TryMove", ReplyAction="http://tempuri.org/ITicTacToeMainContract/TryMoveResponse")]
        string TryMove(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicTacToeMainContract/TryMove", ReplyAction="http://tempuri.org/ITicTacToeMainContract/TryMoveResponse")]
        System.Threading.Tasks.Task<string> TryMoveAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicTacToeMainContract/SendMove")]
        void SendMove(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicTacToeMainContract/SendMove")]
        System.Threading.Tasks.Task SendMoveAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicTacToeMainContract/ShowAllSteps")]
        void ShowAllSteps();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicTacToeMainContract/ShowAllSteps")]
        System.Threading.Tasks.Task ShowAllStepsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicTacToeMainContractCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicTacToeMainContract/ShowMove")]
        void ShowMove(int x, int y, char sign, string info);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Join", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class JoinRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string nickname;
        
        public JoinRequest() {
        }
        
        public JoinRequest(string nickname) {
            this.nickname = nickname;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="JoinResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class JoinResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int JoinResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string info;
        
        public JoinResponse() {
        }
        
        public JoinResponse(int JoinResult, string info) {
            this.JoinResult = JoinResult;
            this.info = info;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicTacToeMainContractChannel : WindowsFormsTicTacToeClient.ServiceReference.ITicTacToeMainContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicTacToeMainContractClient : System.ServiceModel.DuplexClientBase<WindowsFormsTicTacToeClient.ServiceReference.ITicTacToeMainContract>, WindowsFormsTicTacToeClient.ServiceReference.ITicTacToeMainContract {
        
        public TicTacToeMainContractClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TicTacToeMainContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TicTacToeMainContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TicTacToeMainContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TicTacToeMainContractClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WindowsFormsTicTacToeClient.ServiceReference.JoinResponse WindowsFormsTicTacToeClient.ServiceReference.ITicTacToeMainContract.Join(WindowsFormsTicTacToeClient.ServiceReference.JoinRequest request) {
            return base.Channel.Join(request);
        }
        
        public int Join(string nickname, out string info) {
            WindowsFormsTicTacToeClient.ServiceReference.JoinRequest inValue = new WindowsFormsTicTacToeClient.ServiceReference.JoinRequest();
            inValue.nickname = nickname;
            WindowsFormsTicTacToeClient.ServiceReference.JoinResponse retVal = ((WindowsFormsTicTacToeClient.ServiceReference.ITicTacToeMainContract)(this)).Join(inValue);
            info = retVal.info;
            return retVal.JoinResult;
        }
        
        public System.Threading.Tasks.Task<WindowsFormsTicTacToeClient.ServiceReference.JoinResponse> JoinAsync(WindowsFormsTicTacToeClient.ServiceReference.JoinRequest request) {
            return base.Channel.JoinAsync(request);
        }
        
        public void Leave() {
            base.Channel.Leave();
        }
        
        public System.Threading.Tasks.Task LeaveAsync() {
            return base.Channel.LeaveAsync();
        }
        
        public string TryMove(int x, int y) {
            return base.Channel.TryMove(x, y);
        }
        
        public System.Threading.Tasks.Task<string> TryMoveAsync(int x, int y) {
            return base.Channel.TryMoveAsync(x, y);
        }
        
        public void SendMove(int x, int y) {
            base.Channel.SendMove(x, y);
        }
        
        public System.Threading.Tasks.Task SendMoveAsync(int x, int y) {
            return base.Channel.SendMoveAsync(x, y);
        }
        
        public void ShowAllSteps() {
            base.Channel.ShowAllSteps();
        }
        
        public System.Threading.Tasks.Task ShowAllStepsAsync() {
            return base.Channel.ShowAllStepsAsync();
        }
    }
}
